<picture shield_center>
/ items = ("Stimuli/SVG/Arc6.svg")
/ size = (50px, 50px))
/ position = (50%,50%)
/ rotation = 0
</picture>


<shape responsearea>
/ shape = circle
/ size = (500px, 500px)
/ position = (50%, 50%)
</shape>

<shape Notresponsearea>
/ shape = circle
/ color = aqua
/ size = (470px, 470px)
/ position = (50%, 50%)
</shape>

<trial responsearea>
/ stimulusframes = [1 = responsearea, Notresponsearea]
/ validresponse = (responsearea,Notresponsearea)
/ correctresponse = (responsearea)
/ inputdevice = mouse
/ontrialend = [
    values.selected_x = 1px*trial.responsearea.responsex;
	values.selected_y = 1px*trial.responsearea.responsey;
	expressions.calculateSelectedPosition;
]
/ branch = [
    if(trial.responsearea.response == "responsearea") {
        picture.shield_center.hposition = values.selected_x;
         picture.shield_center.vposition = values.selected_y;
		 picture.shield_center.rotation = values.placementAngle
        trial.showchoice;}
]
</trial>


<trial showchoice> 
/ stimulusframes = [1 = angle, responsearea, shield_center]
/ trialduration = 1000
/ recorddata = false
</trial>


<text angle>
/ items = ("Response: <%values.Placementangle%>")
/ fontstyle = ("Arial", 3.5%, true, false, false, false, 5, 1)
/ position = (50%, 10%)
</text>

<trial printangle> 
/ stimulusframes = [1 = angle, responsearea, shield_center]
/ validresponse = (" ")
/ recorddata = false
/ trialduration = 2000
</trial>



<values>
/ selected_x = 0
/ selected_y = 0
/ quadrant = 0
/ centerx = 0.5*display.canvaswidth
/ centery = 0.5*display.canvasheight
/ oppositeSide = 0
/ adjacentSide = 0
/ hypotenuse = 0
/ oppositeSideAngle_degrees = 0
/ oppositeSideAngle_radians = 0
/ placementAngle = 0
/ valid = 0
</values>

<parameters>
/ circleproportion = 0.25
</parameters>

<expressions>
/ centerx = 0.5*display.canvaswidth
/ centery = 0.5*display.canvasheight
/ calculateSelectedPosition = {

	if (values.selected_x > expressions.centerx && values.selected_y <= expressions.centery){
		values.quadrant = 1;
	} else if (values.selected_x >= expressions.centerx && values.selected_y > expressions.centery){
		values.quadrant = 2;
	} else if (values.selected_x < expressions.centerx && values.selected_y >= expressions.centery){
		values.quadrant = 3;
	} else if (values.selected_x <= expressions.centerx && values.selected_y < expressions.centery){
		values.quadrant = 4;
	} else {
		values.quadrant = "check data";
	};
	
	if (values.quadrant == 1){
		if (values.selected_y == expressions.centery){
			values.oppositeSideAngle_degrees = 90;
		} else {
			values.oppositeSide = abs(values.selected_x - expressions.centerx);
			values.adjacentSide = abs(values.selected_y - expressions.centery);
			values.hypotenuse = sqrt(values.oppositeSide*values.oppositeSide + values.adjacentSide*values.adjacentSide);
			values.oppositeSideAngle_radians = asin(values.oppositeSide/values.hypotenuse);
			values.oppositeSideAngle_degrees = deg(values.oppositeSideAngle_radians);			
		};
		values.placementAngle = values.oppositeSideAngle_degrees + 0;
	} else if (values.quadrant == 2){
		if (values.selected_x == expressions.centerx){
			values.oppositeSideAngle_degrees = 90;
		} else {
			values.oppositeSide = abs(values.selected_y - expressions.centery);
			values.adjacentSide = abs(values.selected_x - expressions.centerx);
			values.hypotenuse = sqrt(values.oppositeSide*values.oppositeSide + values.adjacentSide*values.adjacentSide);
			values.oppositeSideAngle_radians = asin(values.oppositeSide/values.hypotenuse);
			values.oppositeSideAngle_degrees = deg(values.oppositeSideAngle_radians);			
		};
		values.placementAngle = values.oppositeSideAngle_degrees + 90;		
	} else if (values.quadrant == 3){
		if (values.selected_y == expressions.centery){
			values.oppositeSideAngle_degrees = 90;
		} else {
			values.oppositeSide = abs(values.selected_x - expressions.centerx);
			values.adjacentSide = abs(values.selected_y - expressions.centery);
			values.hypotenuse = sqrt(values.oppositeSide*values.oppositeSide + values.adjacentSide*values.adjacentSide);
			values.oppositeSideAngle_radians = asin(values.oppositeSide/values.hypotenuse);
			values.oppositeSideAngle_degrees = deg(values.oppositeSideAngle_radians);			
		};
		values.placementAngle = values.oppositeSideAngle_degrees + 180;		
	} else if (values.quadrant == 4){
		if (values.selected_x == expressions.centerx){
			values.oppositeSideAngle_degrees = 90;
		} else {
			values.oppositeSide = abs(values.selected_y - expressions.centery);
			values.adjacentSide = abs(values.selected_x - expressions.centerx);
			values.hypotenuse = sqrt(values.oppositeSide*values.oppositeSide + values.adjacentSide*values.adjacentSide);
			values.oppositeSideAngle_radians = asin(values.oppositeSide/values.hypotenuse);
			values.oppositeSideAngle_degrees = deg(values.oppositeSideAngle_radians);			
		};
		values.placementAngle = values.oppositeSideAngle_degrees + 270;		
	} else {
		values.placementAngle = 360;
	};
}


/ checkResponseCoordinates = {
	if (  ((values.selected_x - expressions.centerx)*(values.selected_x - expressions.centerx)
	+ (values.selected_y - expressions.centery)*(values.selected_y - expressions.centery)) 
	> ((parameters.circleproportion - 0.025) * display.canvasheight) * ((parameters.circleproportion - 0.025) * display.canvasheight)){
		values.valid = 1;
	} else {
		values.valid = 0;
	};
	
}

</expressions>



<block experiment>
/ onblockbegin = [
]
/ trials = [
1 = responsearea;
2 = printangle;
]

</block>



